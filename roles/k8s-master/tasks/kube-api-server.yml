---

- name: apiserver -  set etcd_servers fact
  set_fact:
    etcd_servers: |
      {% for server in kube_apiserver.etcd_members -%}
      {{ kube_apiserver.etcd_protocol }}://{{ server }}:{{ kube_apiserver.etcd_client_port }},
      {%- endfor %}

- name: apiserver / install - create mandatory directories
  file:
    state: directory
    path: "{{ directory }}"
  with_items:
    - "{{ kube_apiserver.data_dir }}"
    - "{{ kube_master_certs_path }}"
    - "{{ kube_apiserver.conf_path }}"
  loop_control:
    loop_var: directory
  become: yes

- name: apiserver / install - download kube-apiserver binary
  get_url:
    url: "{{ kube_apiserver.package_url }}"
    dest: "{{ kube_apiserver.binary_path }}/kube-apiserver"
    mode: 0755
  become: yes

- name: apiserver / policies - upload authorization policy file
  copy:
    src: files/authorization-policy.jsonl
    dest: "{{ kube_master_data_dir }}/authorization-policy.jsonl"
  become: yes

- name: apiserver / tokens - add tokens template
  template:
    src: templates/token.j2
    dest: "{{ kube_master_data_dir }}/token.csv"
  become: yes

- name: apiserver / configure - define systemd environment file for apiserver
  template:
    src: "templates/configuration/{{ file }}.j2"
    dest: "/etc/kubernetes/{{ file }}"
  notify:
    - restart kube-apiserver
  with_items:
    - master
    - apiserver
  loop_control:
    loop_var: file
  become: yes

- name: apiserver / configure - define systemd service for kube-apiserver
  template:
    src: templates/systemd/kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
  notify:
    - restart kube-apiserver
  become: yes

- name: apiserver - enable kube-apiserver service
  service:
    name: kube-apiserver
    state: started
    enabled: yes
  become: yes

- name: apiserver - restart kube-apiserver on condition
  command: /bin/true
  notify: restart kube-apiserver
  when: kube_apiserver.service_force_restart