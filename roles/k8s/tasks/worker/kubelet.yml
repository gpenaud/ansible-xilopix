---

- name: kubelet / install - create mandatory directories
  file:
    state: directory
    path: "{{ directory }}"
  with_items:
    - "{{ kubelet.binary_path }}"
    - "{{ kubelet.kubeconfig_path }}"
    - "{{ kubelet.conf_path }}"
  loop_control:
    loop_var: directory
  become: yes

- name: kubelet / install - download kubelet binary
  get_url:
    url: "{{ kubelet.package_url }}"
    dest: "{{ kubelet.binary_path }}/kubelet"
    mode: 0755
  become: yes
  when: not kube_use_local_binaries

- name: kubelet / install - copy kubelet
  copy:
    src: "{{ kube_local_binaries_path }}/kubelet"
    dest: "{{ kubelet.binary_path }}/kubelet"
    mode: 0755
  become: yes
  when: kube_use_local_binaries

- name: kubelet / configure - copy kubeconfig configuration
  copy:
    content: "{{ kubelet.configuration | to_nice_yaml }}"
    dest: "{{ kubelet.kubeconfig_path }}/kubeconfig"
  become: yes

- name: kubelet / configure - define systemd environment file for kubelet
  template:
    src: "../templates/worker/configuration/{{ file }}.j2"
    dest: "/etc/kubernetes/{{ file }}"
  notify:
    - restart kubelet
  with_items:
    - worker
    - kubelet
  loop_control:
    loop_var: file
  become: yes

- name: kubelet / configure - define systemd service for kubelet
  template:
    src: ../templates/worker/systemd/kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service
  notify:
    - restart kubelet
  become: yes

- name: kubelet - enable kubelet service
  service:
    name: kubelet
    state: started
    enabled: yes
  become: yes

- name: kubelet - restart kubelet on condition
  command: /bin/true
  notify: restart kubelet
  when: kubelet.service_force_restart
